file Decl {
  .{
    #include "AST/Type.hh"
  }.
  node Decl<Decl> {
    parents: [ASTNode];
    children: [
      AttrList attributes
    ];
  };
  node NamedDecl<Decl> {
    parents: [Decl];
    members: [
      Identifier identifier
    ];
    :{
      virtual std::string usr() const {
        return __identifier;
      }
    }:
  };
  node ModuleDecl<Decl> {
    parents: [NamedDecl, DeclContext];
  };
  node FunctorDecl<Decl> {
    parents: [NamedDecl, DeclContext];
    children: [
      static QualType returnType,
      list ParameterDecl parameters,
      CompoundStmt body
    ];
  };
  node FunctionDecl<Decl> {
    parents: [FunctorDecl];
  };
  node ImportDecl<Decl> {
    parents: [Decl];
    members: [
      Identifier moduleName,
      reference<ModuleDecl> module
    ];
  };
  node UsingDecl<Decl> {
    parents: [Decl];
    members: [
      Identifier declName,
      reference<Decl> decl
    ];
  };
  node TypeDecl<Decl> {
    parents: [NamedDecl];
    .{
      TypeDecl(const Identifier& identifier): NamedDecl(Decl(), identifier) {}
    }.
  };
  node ContextDecl<Decl> {
    parents: [TypeDecl, DeclContext];
  };
  node PolicyDecl<Decl> {
    parents: [TypeDecl, DeclContext];
  };
  node TypedefDecl<Decl> {
    parents: [TypeDecl];
    children: [
      static QualType type
    ];
  };
  node TagDecl<Decl> {
    parents: [TypeDecl, DeclContext];
  };
  node StructDecl<Decl> {
    parents: [TagDecl];
    .{
      StructDecl(const Identifier& identifier, DeclContext&& context): TagDecl(TypeDecl(identifier), std::move(context)) {}
    }.
  };
  node EnumDecl<Decl> {
    parents: [TagDecl];
    children: [
      static QualType type
    ];
  };
  node MethodDecl<Decl> {
    parents: [FunctorDecl];
  };
  node VariableDecl<Decl> {
    parents: [NamedDecl];
    children: [
      static QualType type,
      Expr init
    ];
  };
  node ParameterDecl<Decl> {
    parents: [VariableDecl];

  };
  node MemberDecl<Decl> {
    parents: [VariableDecl];
  };
  node EnumMemberDecl<Decl> {
    parents: [Decl];
    members: [
      Identifier identifier
    ];
    children: [
      Expr value
    ];
  };
};
