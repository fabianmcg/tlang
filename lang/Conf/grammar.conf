/* 
* Parser entry point
*/
__top__:= ModuleDecl;

/* 
* Declarations
*/

ModuleDecl node:= TopLevelDeclList :{ _r = return_t::make("__unnamed__", std::move(**_0)); }:;

TopLevelDeclList @< DeclContext >@:=
                TopLevelDecl TopLevelDeclList :{ (*_1)->add(std::move(*_0)); _r = std::move(_1); }:
       |        E :{ _r = return_t::make(); }:
       ;

TopLevelDecl @< Decl >@:=
                FunctionDecl :{ _r = std::move(_0); }:
       |        VarDecl
       |        StructDecl
       ;

FunctionDecl node:= function QualType Identifier "(" ArgumentList ")" CompoundStmt :{ _r = return_t::make(_1.value(), DeclContext()); }:;

ArgumentList:= ParDecl ArgumentInit ArgumentList
        |      E
        ;

ArgumentInit:=  "=" Expr
        |      E
        ;

ParDecl node:= QualType Identifier;

VarDecl node:= QualType Identifier;

StructDecl node:= struct Identifier "{" StructMemberList "}" ";";

StructMemberList node:=
                StructMember StructMemberList
       |        StructMethod StructMemberList
       |        E
       ;

StructMember node:= QualType Identifier;

StructMethod node:= FunctionDecl;

/* 
* Statements
*/

Stmt node:=
                IfStmt
       |        CompoundStmt
       |        ForStmt
       |        WhileStmt
       |        Expr ";"
       ;

CompoundStmt node:= "{" StmtList "}";

StmtList node:=
                Stmt StmtList
       |        E
       ;

IfStmt node:= if "(" Expr ")" Stmt ElseStmt;

ElseStmt node:=
                else Stmt
       |        E
       ;

ForStmt node:= for "(" Expr ")" Stmt;

WhileStmt node:= while "(" Expr ")" Stmt;

/* 
* Expressions
*/

Expr node:= Identifier
        |   IntLiteral
        |   "(" Expr ")"
        ;

/* 
* Types
*/

QualType node:=
                Type
       |        const Type
       ;

QualTypeAux node:= "&";

Type node:= BaseType PtrType;

PtrType node:=
                "*"
       |        E
       ;

BaseType node:=
                BultinType
       |        Identifier
       ;

BultinType node:=
                IntType
       |        FloatType
       |        void
       |        bool
       |        string
       ;

IntType node:=
                int IntTypeAux
       |        uint IntTypeAux
       ;

IntTypeAux node:=
                "<" IntLiteral ">"
       |        E
       ;

FloatType node:= float FloatTypeAux;

FloatTypeAux node:=
                "<" IntLiteral ">"
       |        E
       ;