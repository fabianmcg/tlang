/* 
* Parser entry point
*/
__top__:= ModuleDecl;

/* 
* Declarations
*/

ModuleDecl:= TopLevelDeclList :{ _r = return_t::make("__unnamed__", std::move(**_0)); }:;

TopLevelDeclList @< DeclContext >@ ZeroOrMore:=
                TopLevelDecl :{ (*_1)->add(std::move(*_0)); _r = std::move(_1); }:
       ;

TopLevelDecl @< Decl >@ static:=
                FunctionDecl :{ _r = std::move(_0); }:
       |        VarDecl
       |        StructDecl
       ;

FunctionDecl:= function QualType Identifier "(" ArgumentList ")" CompoundStmt :{ _r = return_t::make(_1.value(), DeclContext()); }:;

ArgumentList:= Argument ArgumentListAux
        |      E
        ;

ArgumentListAux := "," Argument ArgumentListAux
       | E
       ;

Argument:=  ParDecl ArgumentInit;

ArgumentInit:=  "=" Expr
        |      E
        ;

ParDecl:= QualType Identifier;

VarDecl:= QualType Identifier;

StructDecl:= struct Identifier "{" StructMemberList "}" ";";

StructMemberList:=
                StructMember StructMemberList
       |        StructMethod StructMemberList
       |        E
       ;

StructMember:= QualType Identifier;

StructMethod:= FunctionDecl;

/* 
* Statements
*/

Stmt:=
                IfStmt
       |        CompoundStmt
       |        ForStmt
       |        WhileStmt
       |        Expr ";"
       ;

CompoundStmt:= "{" StmtList "}";

StmtList:=
                Stmt StmtList
       |        E
       ;

IfStmt:= if "(" Expr ")" Stmt ElseStmt;

ElseStmt:=
                else Stmt
       |        E
       ;

ForStmt:= for "(" Expr ")" Stmt;

WhileStmt:= while "(" Expr ")" Stmt;

/* 
* Expressions
*/

Expr:= Identifier
        |   IntLiteral
        |   "(" Expr ")"
        ;

/* 
* Types
*/

QualType:=
                Type
       |        const Type
       ;

QualTypeAux:= "&";

Type:= BaseType PtrType;

PtrType:=
                "*"
       |        E
       ;

BaseType:=
                BultinType
       |        Identifier
       ;

BultinType:=
                IntType
       |        FloatType
       |        void
       |        bool
       |        string
       ;

IntType:=
                int IntTypeAux
       |        uint IntTypeAux
       ;

IntTypeAux:=
                "<" IntLiteral ">"
       |        E
       ;

FloatType:= float FloatTypeAux;

FloatTypeAux:=
                "<" IntLiteral ">"
       |        E
       ;
