/* 
* Parser entry point
*/
__top__:= ModuleDecl;

/* 
* Declarations
*/

ModuleDecl node:= TopLevelDeclList :{ _r = return_t::make("__unnamed__", std::move(**_0)); }:;

TopLevelDeclList @< DeclContext >@:=
                 TopLevelDecl TopLevelDeclList :{ (*_1)->add(std::move(*_0)); _r = std::move(_1); }:
        |        E :{ _r = return_t::make(); }:
        ;

TopLevelDecl @< Decl >@:=
                 FunctionDecl :{ _r = std::move(_0); }:
        ;

FunctionDecl node:= function Identifier "(" ")" CompoundStmt :{  _r = return_t::make(_1.value(), DeclContext()); }: ;

Stmt := IfStmt
        | CompoundStmt
        | ForStmt
        | WhileStmt
        ;

StmtList := Stmt StmtList
        |         E
        ;

CompoundStmt node:= "{" StmtList "}";

IfStmt := if "(" Stmt ")"  Stmt else Stmt | if "(" Stmt ")"  Stmt;
ForStmt := for "(" Stmt ")"  Stmt;
WhileStmt := while "(" Stmt ")"  Stmt;


