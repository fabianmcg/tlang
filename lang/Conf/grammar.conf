/* 
* Parser entry point
*/
_rtop_r:= ModuleDecl;

/* 
* Declarations
*/

ModuleDecl node:= TopLevelDeclList :{ _r = make<ModuleDecl>("_runnamed_r", _1); }:;

TopLevelDeclList @< DeclContext >@ node:=
                 TopLevelDecl TopLevelDeclList :{ *_1.add(*_0); _r = std::move(_1); }:
        |        E :{ _r = DeclContext(); }:
        ;

TopLevelDecl @< unique<Decl> >@ node:=
                 NamespaceDecl
        |        TagDecl
        |        FunctionDecl
        |        VarDecl
        ;

NamespaceDecl node:= namespace Identifier "{" TopLevelDeclList "}" :{ _r = make<NamespaceDecl>(_1, _3); }:;

TagDecl node:=
                 StructDecl
        |        EnumDecl
        ;

StructDecl node:= struct Identifier "{" "}" ";";

StructMember @< unique<Decl> >@ node:=
                 MemberDecl
        |        MethodDecl
        |        TagDecl
        ;

StructMemberList @< DeclContext >@ node:=
                 E
        |        StructMember :{ DeclContext ctx; ctx.add(_0); _r = std::move(ctx); }:
        |        StructMember StructMemberList :{ _1.add(_0); _r = std::move(_1); }:
        ;

FunctionDecl node:= function Identifier "(" ")" CompoundStmt :{ ; }:;

Type node:=
                 PtrType
        |        BaseType
        ;

QualType @< QualType >@ node:=
                 Type "&" :{ _r = QualType { _0, Reference }; }:
        |        Type :{ _r = QualType { _0 }; }:
        ;

AutoType node:= auto :{ _r = make<AutoType>(); }:;

NamedType node:= Identifier :{ _r = make<NamedType>(_0); }:;

BaseType @< unique<Type> >@ node:=
                 BuiltinType
        |        AutoType
        |        NamedType
        ;

PtrType @< unique<PtrType> >@ node:= BaseType "*" :{ _r = make<PtrType>(_0); }:;

BuiltinType node:=
                 int :{ _r = make<BuiltinType>(Int, Int_64, Signed); }:
        |        float :{ _r = make<BuiltinType>(Float, Float_32, Signed); }:
        |        void :{ _r = make<BuiltinType>(Void); }:
        ;
