/* 
* Parser entry point
*/
__top__:= ModuleDecl;

/* 
* Declarations
*/

ModuleDecl node:= TopLevelDeclList :{ $$ = make<ModuleDecl>("__unnamed__", $3); }:;

TopLevelDeclList @< DeclContext >@:=
                E
        |       TopLevelDecl :{ DeclContext ctx; ctx.add($0); $$ = std::move(ctx); }:
        |       TopLevelDecl TopLevelDeclList :{ $1.add($0); $$ = std::move($1); }:
        ;

TopLevelDecl @< unique<Decl> >@:=
                NamespaceDecl
        |       TagDecl
        |       FunctionDecl
        |       VarDecl
        ;

NamespaceDecl node:= T::namespace T::identifier T::lBrace TopLevelDeclList T::rBrace :{ $$ = make<NamespaceDecl>($1, $3); }:;

TagDecl node:=
                StructDecl
        |       EnumDecl
        ;

StructDecl node:= T::struct T::identifier T::lBrace T::rBrace T::semi;

StructMember @< unique<Decl> >@:=
                MemberDecl
        |       MethodDecl
        |       TagDecl
        ;

StructMemberList @< DeclContext >@:=
                E
        |       StructMember :{ DeclContext ctx; ctx.add($0); $$ = std::move(ctx); }:
        |       StructMember StructMemberList :{ $1.add($0); $$ = std::move($1); }:
        ;
        
FunctionDecl node:= T::function T::identifier T::lParen T::rParen CompoundStmt :{ ; }:;

Type node:=
                PtrType
        |       BaseType
        ;

QualType @< QualType >@:=
                Type T::Reference :{ $$ = QualType { $0, Reference }; }:
        |       Type :{ $$ = QualType { $0 }; }:
        ;

AutoType node:= T::auto :{ $$ = make<AutoType>(); }:;

NamedType node:= T::identifier :{ $$ = make<NamedType>($0); }:;

BaseType @< unique<Type> >@:=
                BuiltinType
        |       AutoType
        |       NamedType
        ;

PtrType @< unique<PtrType> >@:= BaseType T::asterisk :{ $$ = make<PtrType>($0); }:;

BuiltinType node:=
                T::int :{ $$ = make<BuiltinType>(Int, Int_64, Signed); }:
        |       T::float :{ $$ = make<BuiltinType>(Float, Float_32, Signed); }:
        |       T::void :{ $$ = make<BuiltinType>(Void); }:
        ;
