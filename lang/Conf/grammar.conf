/* 
* Parser entry point
*/

__top__:
                ModuleDecl
       ;

/* 
* Declarations
*/


ModuleDecl:
                TopLevelDeclList         
                        :{
                            _r = return_t::make(NamedDecl(Decl(), "__unnamed__"), std::move(**_0));
                        }:
       ;

TopLevelDeclList @<DeclContext>@ static ZeroOrMore:
                TopLevelDecl         
                        :{
                            _r.init();
                            (*_r)->add(std::move(*_0));
                        }:
       ;

TopLevelDecl @<Decl>@:
                FunctionDecl         
                        :{
                            _r = std::move(_0);
                        }:
       |        VariableDecl         
                        :{
                            _r = std::move(_0);
                        }:
       |        StructDecl         
                        :{
                            _r = std::move(_0);
                        }:
       ;

FunctionDecl:
                function QualType Identifier "(" ParameterList ")" CompoundStmt         
                        :{
                            _r = return_t::make(
                                FunctorDecl(NamedDecl(Decl(), _2.value()), DeclContext(), std::move(*_1), std::move(*_4), std::move(*_6)));
                        }:
       ;

ParameterList @<ASTNodeList>@:
                ParameterDecl ParameterListH         
                        :{
                            _r.init();
                            (*_r)->push_back(std::move(*_0));
                            if (_1.isSuccess()) {
                              for (auto &node : (**_1))
                                (*_r)->push_back(std::move(node));
                            }
                        }:
       |        E         
                        :{
                            _r.init();
                        }:
       ;

ParameterListH @<ASTNodeList>@ ZeroOrMore:
                CommaParameter         
                        :{
                            _r.init();
                            (*_r)->push_back(std::move(*_0));
                        }:
       ;

CommaParameter @<ParameterDecl>@:
                "," ParameterDecl         
                        :{
                            _r = std::move(_1);
                        }:
       ;

ParameterDecl:
                QualType Identifier VariableInit         
                        :{
                            _r = return_t::make(VariableDecl(NamedDecl(Decl(), _1.value()), std::move(*_0)));
                        }:
       ;

VariableDecl:
                QualType Identifier VariableInit         
                        :{
                            _r = return_t::make(NamedDecl(Decl(), _1.value()), std::move(*_0));
                        }:
       ;

VariableInit @<int>@:
                "=" Expr
       |        E
       ;

StructDecl:
                struct Identifier "{" StructElementList "}" ";"         
                        :{
                            _r = return_t::make(_1.value(), std::move(_3 ? std::move(**_3) : DeclContext()));
                        }:
       ;

StructElementList @<DeclContext>@ ZeroOrMore:
                StructElement         
                        :{
                            _r.init();
                            (*_r)->add(std::move(*_0));
                        }:
       ;

StructElement @<Decl>@:
                MemberDecl         
                        :{
                            _r = std::move(_0);
                        }:
       |        MethodDecl         
                        :{
                            _r = std::move(_0);
                        }:
       ;

MemberDecl:
                QualType Identifier VariableInit ";"         
                        :{
                            _r = return_t::make(NamedDecl(Decl(), _1.value()), std::move(*_0));
                        }:
       ;

MethodDecl:
                function QualType Identifier "(" ParameterList ")" CompoundStmt         
                        :{
                            _r = return_t::make(
                                FunctorDecl(NamedDecl(Decl(), _2.value()), DeclContext(), std::move(*_1), std::move(*_4), std::move(*_6)));
                        }:
       ;

/* 
* Statements
*/

Stmt:
                IfStmt         
                        :{
                            _r = std::move(_0);
                        }:
       |        CompoundStmt         
                        :{
                            _r = std::move(_0);
                        }:
       |        ForStmt         
                        :{
                            _r = std::move(_0);
                        }:
       |        WhileStmt         
                        :{
                            _r = std::move(_0);
                        }:
       |        Expr ";"         
                        :{
                            _r = std::move(_0);
                        }:
       ;

CompoundStmt:
                "{" StmtList "}"         
                        :{
                            _r = return_t::make(Stmt(), std::move(*_1));
                        }:
       ;

StmtList @<ASTNodeList>@ ZeroOrMore:
                Stmt         
                        :{
                            _r.init();
                            (*_r)->push_back(std::move(*_0));
                        }:
       ;

IfStmt:
                if IfStmtH         
                        :{
                            _r = std::move(_1);
                        }:
       ;

IfStmtH @<IfStmt>@:
                "(" Expr ")" Stmt ElseStmt         
                        :{
                            _r = return_t::make(Stmt(), false, std::move(*_1), std::move(*_3), std::move(*_4));
                        }:
       |        constexpr "(" Expr ")" Stmt ElseStmt         
                        :{
                            _r = return_t::make(Stmt(), true, std::move(*_2), std::move(*_4), std::move(*_5));
                        }:
       ;

ElseStmt @<Stmt>@:
                else Stmt         
                        :{
                            _r = std::move(_1);
                        }:
       |        E
       ;

ForStmt:
                for "(" RangeExpr ")" Stmt         
                        :{
                            _r = return_t::make(Stmt(), std::move(*_2), std::move(*_4));
                        }:
       ;

WhileStmt:
                while "(" Expr ")" Stmt         
                        :{
                            _r = return_t::make(Stmt(), std::move(*_2), std::move(*_4));
                        }:
       ;

/* 
* Expressions
*/

Expr: PrimaryExpr;

TopExpr @<Expr>@:
                PrimaryExpr :{ _r = std::move(_0); }:
       ;

PrimaryExpr @<Expr>@:
                DeclRefExpr         
                        :{
                            _r = std::move(_0);
                        }:
       |        ConstantExpr         
                        :{
                            _r = std::move(_0);
                        }:
       |        "(" Expr ")"         
                        :{
                            _r = return_t::create(ParenExpr(std::move(*_1)));
                        }:
       |        this         
                        :{
                            _r;
                        }:
       ;

DeclRefExpr:
                Identifier         
                        :{
                            _r;
                        }:
       ;

PostfixExpr @<Expr>@:
                ArrayExpr         
                        :{
                            _r;
                        }:
       |        "++"         
                        :{
                            _r;
                        }:
       |        "--"         
                        :{
                            _r;
                        }:
       |        E
       ;

PrefixExpr @<Expr>@:
                "+"         
                        :{
                            _r;
                        }:
       |        "-"         
                        :{
                            _r;
                        }:
       |        "!"         
                        :{
                            _r;
                        }:
       |        "*"         
                        :{
                            _r;
                        }:
       |        "~"         
                        :{
                            _r;
                        }:
       |        "++"         
                        :{
                            _r;
                        }:
       |        "--"         
                        :{
                            _r;
                        }:
       |        E
       ;

ArrayExpr @<Expr>@:
                "[" ArrayExprList "]"
       ;

ArrayExprList @<ASTNodeList>@:
                ArrayExprElement ArrayExprListH
       ;

ArrayExprListH @<ASTNodeList>@ ZeroOrMore:
                CommaArrayExpr         
                        :{
                            _r.init();
                            (*_r)->push_back(std::move(*_0));
                        }:
       ;

CommaArrayExpr @<Expr>@:
                "," ArrayExprElement         
                        :{
                            _r = std::move(_1);
                        }:
       ;

ArrayExprElement @<Expr>@:
                RangeExpr
       ;

ConstantExpr @<Expr>@:
                IntLiteral         
                        :{
                            _r = return_t::create(IntegerLiteral(IntType(), _0.value()));
                        }:
       |        FloatLiteral         
                        :{
                            _r = return_t::create(FloatLiteral(FloatType(), _0.value()));
                        }:
       ;

RangeExpr:
                Expr ":" Expr ":" Expr
       ;

/* 
* Types
*/

QualType:
                Type QualTypeH         
                        :{
                            _r = return_t::make((QualType::cvr_qualifiers)(QualType::None | **_1), std::move(*_0));
                        }:
       |        const Type QualTypeH         
                        :{
                            _r = return_t::make((QualType::cvr_qualifiers)(QualType::Const | **_2), std::move(*_1));
                        }:
       ;

QualTypeH @<QualType::cvr_qualifiers>@ static:
                "&"         
                        :{
                            _r = return_t::make(QualType::Reference);
                        }:
       |        E         
                        :{
                            _r = return_t::make(QualType::None);
                        }:
       ;

Type:
                BaseType PtrType         
                        :{
                            if (_1)
                              _r = return_t::create(PtrType(Type(), std::move(*_0)));
                            else
                              _r = std::move(_0);
                        }:
       ;

PtrType @<bool>@ static:
                "*"         
                        :{
                            _r = return_t::make(true);
                        }:
       |        E
       ;

BaseType @<Type>@:
                BuiltinType         
                        :{
                            _r = std::move(_0);
                        }:
       |        Identifier         
                        :{
                            _r = return_t::create(DefinedType(Type(), _0.value(), reference<TagDecl>{}));
                        }:
       ;

BuiltinType:
                IntType         
                        :{
                            _r = std::move(_0);
                        }:
       |        FloatType         
                        :{
                            _r = std::move(_0);
                        }:
       |        void         
                        :{
                            _r = return_t::create(VoidType());
                        }:
       |        bool         
                        :{
                            _r = return_t::create(BoolType());
                        }:
       |        string         
                        :{
                            _r = return_t::create(StringType());
                        }:
       ;

IntType:
                int IntTypeH         
                        :{
                            _r = return_t::make(IntType(BuiltinType(), IntType::Default, IntType::Signed));
                        }:
       |        uint IntTypeH         
                        :{
                            _r = return_t::make(IntType(BuiltinType(), IntType::Default, IntType::Unsigned));
                        }:
       ;

IntTypeH @<int>@:
                "<" IntLiteral ">"
       |        E
       ;

FloatType:
                float FloatTypeH         
                        :{
                            _r = return_t::make(FloatType(BuiltinType(), FloatType::Default));
                        }:
       ;

FloatTypeH @<int>@:
                "<" IntLiteral ">"
       |        E
       ;

