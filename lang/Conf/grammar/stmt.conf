Stmt:
                IfStmt
                        :{
                            _r = std::move(_0);
                        }:
       |        CompoundStmt
                        :{
                            _r = std::move(_0);
                        }:
       |        WhileStmt
                        :{
                            _r = std::move(_0);
                        }:
       |        ForStmt
                        :{
                            _r = std::move(_0);
                        }:
       |        LoopStmt
                        :{
                            _r = std::move(_0);
                        }:
       |        Expr ";"
                        :{
                            _r = std::move(_0);
                        }:
       |        AtomicStmt
                        :{
                            _r = std::move(_0);
                        }:
       |        let VariableList ";"
                        :{
                            _r = create<return_t, false>(DeclStmt(std::move(*_1)));
                            _r.range(_0.begin(), _1.end());
                        }:
       |        break ";"
                        :{
                            _r = create<return_t, false>(BreakStmt());
                            _r.range(_0.begin(), _1.end());
                        }:
       |        continue ";"
                        :{
                            _r = create<return_t, false>(ContinueStmt());
                            _r.range(_0.begin(), _1.end());
                        }:
       |        return Expr ";"
                        :{
                            _r = create<return_t, false>(ReturnStmt(*_1));
                            _r.range(_0.begin(), _1.end());
                        }:
       |        ContextStmt
                        :{
                            _r = std::move(_0);
                        }:
       |        ParallelStmt
                        :{
                            _r = std::move(_0);
                        }:
       |        single Stmt
                        :{
                            _r = create<return_t, false>(SingleStmt(*_1));
                            _r.range(_0.begin(), _1.end());
                        }:
       |        leading Stmt
                        :{
                            _r = create<return_t, false>(MainStmt(*_1));
                            _r.range(_0.begin(), _1.end());
                        }:
       |        SyncStmt
                        :{
                            _r = std::move(_0);
                            _r.range(_0.begin(), _0.end());
                        }:
       ;

CompoundStmt:
                "{" StmtList "}"
                        :{
                            _r = make<return_t>();
                            if (_1) {
                              auto &stmts = *_1;
                              for (auto &stmt : stmts)
                                (*_r)->addStmt(stmt);
                            }
                            _r.range(_0.begin(), _2.end());
                        }:
       ;

StmtList @<std::vector<Stmt *>>@ static ZeroOrMore:
                Stmt
                        :{
                            init(_r);
                            (*_r).push_back(*_0);
                        }:
       ;

IfStmt:
                if IfStmtH
                        :{
                            _r = std::move(_1);
                            _r.begin() = _0.begin();
                            _r.range(_r.range());
                        }:
       ;

IfStmtH @<IfStmt>@:
                "(" Expr ")" Stmt ElseStmt
                        :{
                            _r = make<return_t>(false, *_1, *_3, *_4);
                            _r.end() = _4 ? _4.end() : _3.end();
                        }:
       |        constexpr "(" Expr ")" Stmt ElseStmt
                        :{
                            _r = make<return_t>(true, *_2, *_4, *_5);
                            _r.end() = _5 ? _5.end() : _4.end();
                        }:
       ;

ElseStmt @<Stmt>@:
                else Stmt
                        :{
                            _r = std::move(_1);
                            _r.range(_0.begin(), _1.end());
                        }:
       |        E
       ;

WhileStmt:
                while "(" Expr ")" Stmt
                        :{
                            _r = make<return_t>(*_2, *_4);
                            _r.range(_0.begin(), _4.end());
                        }:
       ;

ForStmt:
                for "(" RangeList ")" Stmt
                        :{
                            _r = make<return_t>(std::move(*_2), *_4);
                            _r.range(_0.begin(), _4.end());
                        }:
       ;

RangeList @<std::vector<RangeStmt*>>@ static:
                RangeStmt RangeListH
                        :{
                            init(_r);
                            (*_r).push_back(*_0);
                            if (_1) {
                              for (auto &node : (*_1))
                                (*_r).push_back(node);
                            }
                        }:
       |        E
                        :{
                            init(_r);
                        }:
       ;

RangeListH @<std::vector<RangeStmt*>>@ static ZeroOrMore:
                CommaRange
                        :{
                            init(_r);
                            (*_r).push_back(*_0);
                        }:
       ;

CommaRange @<RangeStmt>@:
                "," RangeStmt
                        :{
                            _r = std::move(_1);
                        }:
       ;

RangeStmt:
                DeclRefExpr in RangeExpr
                        :{
                            _r = make<return_t>(nullptr, *_0, *_2);
                            _r.range(_0.begin(), _2.end());
                        }:
       |        let VariableDecl in RangeExpr
                        :{
                            _r = make<return_t>(*_1, nullptr, *_3);
                            _r.range(_0.begin(), _3.end());
                        }:
       ;


VariableList @<std::vector<VariableDecl*>>@ static:
                VariableDecl VariableListH
                        :{
                            init(_r);
                            (*_r).push_back(*_0);
                            if (_1) {
                              for (auto &node : (*_1))
                                (*_r).push_back(node);
                            }
                        }:
       |        E
                        :{
                            init(_r);
                        }:
       ;

VariableListH @<std::vector<VariableDecl*>>@ static ZeroOrMore:
                CommaVariable
                        :{
                            init(_r);
                            (*_r).push_back(*_0);
                        }:
       ;

CommaVariable @<VariableDecl>@:
                "," VariableDecl
                        :{
                            _r = std::move(_1);
                        }:
       ;

ContextStmt @<ContextStmt>@:
                context ContextKind ContextOptions Stmt
                        :{
                            _r = make<return_t>(std::move(*_1), std::move(*_2), std::move(*_3));
                            _r.range(_0.begin(), _3.end());
                        }:
       ;

ContextKind @<ContextStmt::Kind>@ static:
                "<" Identifier ">" 
                        :{ 
                           if (_1.value() == "host")
                             _r = make<return_t>(ContextStmt::Host); 
                           else if (_1.value() == "device")
                             _r = make<return_t>(ContextStmt::Device); 
                           else if (_1.value() == "default")
                             _r = make<return_t>(ContextStmt::Default);
                        }:
       |        E  :{ _r = make<return_t>(ContextStmt::Inherited); }:
       ;

ContextOptions @<List<MapStmt*>>@ static:
                "[" MapStmtList "]" :{ _r = std::move(_1); }:
       |        E  :{ _r = make<return_t>(); }:
       ;

MapStmtList @<List<MapStmt*>>@ static ZeroOrMore:
                MapStmt
                        :{
                            init(_r);
                            (*_r).push_back(*_0);
                        }:
        ;

MapStmt: map "(" Identifier ":" ExprList ")"
                        :{
                            MapStmt::Kind kind;
                            if (_2.value() == "to")
                              kind = MapStmt::to;
                            else if (_2.value() == "from")
                              kind = MapStmt::from;
                            else if (_2.value() == "to_from")
                              kind = MapStmt::toFrom;
                            else if (_2.value() == "create")
                              kind = MapStmt::create;
                            else
                              throw(std::runtime_error("Invalid map kind: " + _2.value()));
                            _r = make<return_t>(std::move(kind), std::move(*_4));
                            _r.range(_0.begin(), _5.end());
                        }:
       ;

ParallelStmt @<Stmt>@:
                parallel ParallelStmtOpts ParallelStmtOptions Stmt
                        :{
                            auto pstmt = make_node<ParallelStmt>(*_2, std::move(*_1), *_3);
                            pstmt->getSourceRange() = SourceRange(_0.begin(), _3.end());
                            _r = create<return_t>(ContextStmt(ContextStmt::Inherited, List<MapStmt*>(), pstmt));
                            _r.range(_0.begin(), _3.end());
                        }:
       ;

ParallelStmtOpts @<List<TupleExpr*>>@ static:
                "<" TupleList ">" :{ _r = std::move(_1); }:
       |        E  :{ _r = make<return_t>(); }:
       ;

LoopStmt:
                loop LoopStmtOpts ParallelStmtOptions "(" RangeList ")" Stmt
                        :{
                            _r = make<return_t>(*_1, std::move(*_2), std::move(*_4), *_6);
                            _r.range(_0.begin(), _6.end());
                        }:
       ;

LoopStmtOpts @<LoopStmt::Mapping>@ static:
                "<" LoopMapping ">" :{ _r = std::move(_1); }:
       |        E :{ _r = make<return_t>(); }:
       ;

LoopMapping @<LoopStmt::Mapping>@ static ZeroOrMore:
                MappingKind :{ init(_r); (*_r) =  static_cast<LoopStmt::Mapping>(*_r | *_0); }:
       ;


MappingKind @<LoopStmt::Mapping>@ static:
                Identifier
                        :{
                            if (_0.value() == "S")
                              (*_r) = LoopStmt::Scalar;
                            if (_0.value() == "V")
                              (*_r) = LoopStmt::Vector;
                            else if (_0.value() == "matrix")
                              (*_r) = LoopStmt::Matrix;
                            else if (_0.value() == "T")
                              (*_r) = LoopStmt::Tensor;
                            else if (_0.value() == "E")
                              (*_r) = LoopStmt::Expand;
                            else
                              (*_r) = LoopStmt::Auto;
                        }:
      ;

ParallelStmtOptions:
                "[" ParallelOptions "]"
                        :{
                            _r = make<return_t>(std::move(*_1));
                            _r.range(_0.begin(), _2.end());
                        }:
       |        E      :{   _r = return_t::success(nullptr); }:
       ;

ParallelOptions @<ParallelStmtOptions>@ static ZeroOrMore:
                ParallelOpts
                        :{
                            init(_r);
                            auto index = (*_0).index();
                            if (index == 0)
                              (*_r).getNoWait() = std::get<0>(*_0);
                            else if (index == 1) {
                              auto pv = std::move(std::get<1>(*_0));
                              if(pv.first == 0)
                                (*_r).getFirstPrivateVariables() = std::move(pv.second);
                              else if(pv.first == 1)
                                (*_r).getPrivateVariables() = std::move(pv.second);
                              else
                                (*_r).getSharedVariables() = std::move(pv.second);
                            }
                            else if (index == 2)
                              (*_r).getReduceList().push_back(std::move(std::get<2>(*_0)));
                        }:
       ;

ParallelOpts @<std::variant<bool, std::pair<int, List<Expr*>>, ReduceStmt*>>@ static:
                FirstPrivateVariables
                        :{
                            _r = create<return_t>(std::pair<int, std::vector<Expr*>>{0, std::move(*_0)});
                        }:
        |        PrivateVariables
                        :{
                            _r = create<return_t>(std::pair<int, std::vector<Expr*>>{1, std::move(*_0)});
                        }:
        |        SharedVariables
                        :{
                            _r = create<return_t>(std::pair<int, std::vector<Expr*>>{2, std::move(*_0)});
                        }:
        |        nowait
                        :{
                            _r = create<return_t>(true);
                        }:
        |        ReduceStmt
                        :{
                            _r = create<return_t>(std::move(*_0));
                        }:
       ;

FirstPrivateVariables @<std::vector<Expr*>>@ static:
                firstprivate "(" ExprList ")"
                        :{
                            _r = std::move(_2);
                        }:
       ;

PrivateVariables @<std::vector<Expr*>>@ static:
                private "(" ExprList ")"
                        :{
                            _r = std::move(_2);
                        }:
       ;

SharedVariables @<std::vector<Expr*>>@ static:
                shared "(" ExprList ")"
                        :{
                            _r = std::move(_2);
                        }:
       ;

ReduceStmtList @<List<ReduceStmt*>>@ static ZeroOrMore:
                ReduceStmt
                        :{
                            init(_r);
                            (*_r).push_back(*_0);
                        }:
      ;

ReduceStmt:
                reduce "(" ReduceOperator "," ExprList ")"
                        :{
                            _r = make<return_t>(*_2, std::move(*_4));
                            _r.range(_0.begin(), _5.end());
                        }:
       ;

ReduceOperator @<ReduceStmt::Operator>@ static:
                "+"  :{ _r = make<return_t>(ReduceStmt::Plus); }:
       ;

SyncStmt:        
                sync SyncKind ";"
                        :{
                            _r = make<return_t>(*_1);
                            _r.range(_0.begin(), _1.end());
                        }:
       ;


SyncKind @<SyncStmt::Kind>@ static:
                Identifier
                        :{
                            init(_r);
                            if (_0.value() == "vector")
                              (*_r) = SyncStmt::Vector;
                            else if (_0.value() == "matrix")
                              (*_r) = SyncStmt::Matrix;
                            else if (_0.value() == "tensor")
                              (*_r) = SyncStmt::Tensor;
                        }:
       ;

AtomicStmt:
                atomic "(" AtomicOperator "," Expr "," Expr ")" ";"
                        :{
                            _r = make<return_t>(*_2, *_4, *_6);
                            _r.range(_0.begin(), _8.end());
                        }:
       ;

AtomicOperator @<AtomicStmt::Operator>@ static:
                "+"  :{ _r = make<return_t>(AtomicStmt::Plus); }:
       |        "-"  :{ _r = make<return_t>(AtomicStmt::Minus); }:
       ;

