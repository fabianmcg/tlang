Stmt:
                IfStmt         
                        :{
                            _r = std::move(_0);
                        }:
       |        CompoundStmt         
                        :{
                            _r = std::move(_0);
                        }:
       |        WhileStmt         
                        :{
                            _r = std::move(_0);
                        }:
       |        ForStmt         
                        :{
                            _r = std::move(_0);
                        }:
       |        LoopStmt         
                        :{
                            _r = std::move(_0);
                        }:
       |        Expr ";"         
                        :{
                            _r = std::move(_0);
                        }:
       |        let VariableDecl ";"         
                        :{
                            _r = create<return_t, false>(DeclStmt(Stmt(), *_1));
                            _r.range(_0.begin(), _1.end());
                        }:
       |        break ";"         
                        :{
                            _r = create<return_t, false>(BreakStmt());
                            _r.range(_0.begin(), _1.end());
                        }:
       |        continue ";"         
                        :{
                            _r = create<return_t, false>(ContinueStmt());
                            _r.range(_0.begin(), _1.end());
                        }:
       |        return Expr ";"         
                        :{
                            _r = create<return_t, false>(ReturnStmt(ValueStmt(), *_1));
                            _r.range(_0.begin(), _1.end());
                        }:
       |        parallel Stmt         
                        :{
                            _r = create<return_t, false>(ParallelStmt(Stmt(), *_1));
                            _r.range(_0.begin(), _1.end());
                        }:
       |        single Stmt         
                        :{
                            _r = create<return_t, false>(SingleStmt(Stmt(), *_1));
                            _r.range(_0.begin(), _1.end());
                        }:
       |        leading Stmt         
                        :{
                            _r = create<return_t, false>(MainStmt(Stmt(), *_1));
                            _r.range(_0.begin(), _1.end());
                        }:
       |        sync ";"         
                        :{
                            _r = create<return_t, false>(SyncStmt());
                            _r.range(_0.begin(), _1.end());
                        }:
       ;

CompoundStmt:
                "{" StmtList "}"         
                        :{
                            _r = make<return_t>(Stmt(), _1 ? std::move(*_1) : std::vector<Stmt *>());
                            _r.range(_0.begin(), _2.end());
                        }:
       ;

StmtList @<std::vector<Stmt *>>@ static ZeroOrMore:
                Stmt         
                        :{
                            init(_r);
                            (*_r).push_back(*_0);
                        }:
       ;

IfStmt:
                if IfStmtH         
                        :{
                            _r = std::move(_1);
                            _r.begin() = _0.begin();
                        }:
       ;

IfStmtH @<IfStmt>@:
                "(" Expr ")" Stmt ElseStmt         
                        :{
                            _r = make<return_t>(Stmt(), false, *_1, *_3, *_4);
                            _r.end() = _4 ? _4.end() : _3.end();
                        }:
       |        constexpr "(" Expr ")" Stmt ElseStmt         
                        :{
                            _r = make<return_t>(Stmt(), true, *_2, *_4, *_5);
                            _r.end() = _5 ? _5.end() : _4.end();
                        }:
       ;

ElseStmt @<Stmt>@:
                else Stmt         
                        :{
                            _r = std::move(_1);
                            _r.range(_0.begin(), _1.end());
                        }:
       |        E
       ;

WhileStmt:
                while "(" Expr ")" Stmt         
                        :{
                            _r = make<return_t>(Stmt(), *_2, *_4);
                            _r.range(_0.begin(), _4.end());
                        }:
       ;

ForStmt:
                for "(" RangeList ")" Stmt         
                        :{
                            _r = make<return_t>(Stmt(), *_2, *_4);
                            _r.range(_0.begin(), _4.end());
                        }:
       ;

LoopStmt:
                loop "(" RangeList ")" Stmt         
                        :{
                            _r = make<return_t>(Stmt(), *_2, *_4);
                            _r.range(_0.begin(), _4.end());
                        }:
       ;

RangeList @<std::vector<RangeStmt*>>@ static:
                RangeStmt RangeListH         
                        :{
                            init(_r);
                            (*_r).push_back(*_0);
                            if (_1) {
                              for (auto &node : (*_1))
                                (*_r).push_back(node);
                            }
                        }:
       |        E         
                        :{
                            init(_r);
                        }:
       ;

RangeListH @<std::vector<RangeStmt*>>@ static ZeroOrMore:
                CommaRange         
                        :{
                            init(_r);
                            (*_r).push_back(*_0);
                        }:
       ;

CommaRange @<RangeStmt>@:
                "," RangeStmt         
                        :{
                            _r = std::move(_1);
                        }:
       ;

RangeStmt:
                DeclRefExpr in RangeExpr
                        :{
                            _r = make<return_t>(Stmt(), nullptr, *_0, *_2);
                            _r.range(_0.begin(), _2.end());
                        }:
       |        let VariableDecl in RangeExpr
                        :{
                            _r = make<return_t>(Stmt(), *_1, nullptr, *_3);
                            _r.range(_0.begin(), _3.end());
                        }:
       ; 
