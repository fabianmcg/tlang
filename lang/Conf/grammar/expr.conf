Expr:
                TopExpr
       ;

TopExpr @<Expr>@:
                PrefExpr PPExpr         
                        :{
                            if (!_0)
                              _r = std::move(_1);
                            else {
                              (*_0)->getExpr() = *_1;
                              _r = std::move(_0);
                            }
                        }:
        ;

PPExpr @<Expr>@:
                PrimaryExpr PostfixExpr         
                        :{
                            if (!_1)
                              _r = std::move(_0);
                            else {
                              if (auto expr = dynamic_cast<CallExpr *>(*_1)) {
                                expr->getCallee() = *_0;
                                _r = std::move(_1);
                              }
                              else if (auto expr = dynamic_cast<ArrayExpr *>(*_1)) {
                                expr->getArray() = *_0;
                                _r = std::move(_1);
                              }
                              _r.range(_0.begin(), _1.end());
                            }
                        }:
       ;

PrimaryExpr @<Expr>@:
                DeclRefExpr         
                        :{
                            _r = std::move(_0);
                        }:
       |        ConstantExpr         
                        :{
                            _r = std::move(_0);
                        }:
       |        "(" Expr ")"         
                        :{
                            _r = create<return_t, false>(ParenExpr(*_1));
                            _r.range(_0.begin(), _2.end());
                        }:
       |        this         
                        :{
                            _r = create<return_t, false>(ThisExpr());
                        }:
       ;

PostfixExpr @<Expr>@ Predictive:
                CallExpr         
                        :{
                            _r = std::move(_0);
                        }:
       |        "[" ExprList "]"         
                        :{
                            _r = create<return_t, false>(ArrayExpr(std::move(*_1)));
                        }:
       |        "++"         
                        :{
                            _r;
                        }:
       |        "--"         
                        :{
                            _r;
                        }:
       |        E
       ;

CallExpr:
                "(" ExprList ")"         
                        :{
                            _r = make<return_t>(std::move(*_1));
                            _r.range(_0.begin(), _2.end());
                        }:
       ;

ExprList @<std::vector<Expr *>>@ static:
                Expr ExprListH         
                        :{
                            init(_r);
                            (*_r).push_back(*_0);
                            if (_1) {
                              for (auto &node : (*_1))
                                (*_r).push_back(node);
                            }
                        }:
       |        E         
                        :{
                            init(_r);
                        }:
       ;

ExprListH @<std::vector<Expr *>>@ static ZeroOrMore:
                CommaListExpr         
                        :{
                            init(_r);
                            (*_r).push_back(*_0);
                        }:
       ;

CommaListExpr @<Expr>@:
                "," Expr         
                        :{
                            _r = std::move(_1);
                        }:
       ;

PrefExpr @<UnaryOperator>@:
                "&"         
                        :{
                            _r = make<return_t>(false, UnaryOperator::Address, nullptr);
                        }:
       |        
                "*"         
                        :{
                            _r = make<return_t>(false, UnaryOperator::Dereference, nullptr);
                        }:
       |        "-"         
                        :{
                            _r = make<return_t>(false, UnaryOperator::Minus, nullptr);
                        }:
       |        "+"         
                        :{
                            _r = make<return_t>(false, UnaryOperator::Plus, nullptr);
                        }:
       |        E
       ;

DeclRefExpr:
                Identifier         
                        :{
                            _r = make<return_t>(_0.value());
                            _r.range(_0.range());
                        }:
       ;

ConstantExpr @<Expr>@:
                IntLiteral
                        :{
                            _r = create<return_t, false>(IntegerLiteral(typeContext, _0.value(), IntType::Default));
                            _r.range(_0.range());
                        }:
       |
                IntLiteral_8
                        :{
                            _r = create<return_t, false>(IntegerLiteral(typeContext, _0.value(), IntType::P_8));
                            _r.range(_0.range());
                        }:
       |
                IntLiteral_16
                        :{
                            _r = create<return_t, false>(IntegerLiteral(typeContext, _0.value(), IntType::P_16));
                            _r.range(_0.range());
                        }:
       |
                IntLiteral_32
                        :{
                            _r = create<return_t, false>(IntegerLiteral(typeContext, _0.value(), IntType::P_32));
                            _r.range(_0.range());
                        }:
       |
                IntLiteral_64
                        :{
                            _r = create<return_t, false>(IntegerLiteral(typeContext, _0.value(), IntType::P_64));
                            _r.range(_0.range());
                        }:
       |        UIntLiteral
                        :{
                            _r = create<return_t, false>(UIntegerLiteral(typeContext, _0.value(), IntType::Default));
                            _r.range(_0.range());
                        }:
       |
                UIntLiteral_8
                        :{
                            _r = create<return_t, false>(UIntegerLiteral(typeContext, _0.value(), IntType::P_8));
                            _r.range(_0.range());
                        }:
       |
                UIntLiteral_16
                        :{
                            _r = create<return_t, false>(UIntegerLiteral(typeContext, _0.value(), IntType::P_16));
                            _r.range(_0.range());
                        }:
       |
                UIntLiteral_32
                        :{
                            _r = create<return_t, false>(UIntegerLiteral(typeContext, _0.value(), IntType::P_32));
                            _r.range(_0.range());
                        }:
       |
                UIntLiteral_64
                        :{
                            _r = create<return_t, false>(UIntegerLiteral(typeContext, _0.value(), IntType::P_64));
                            _r.range(_0.range());
                        }:
       |        FloatLiteral
                        :{
                            _r = create<return_t, false>(FloatLiteral(typeContext, _0.value(), FloatType::Default));
                            _r.range(_0.range());
                        }:
       |        FloatLiteral_32
                        :{
                            _r = create<return_t, false>(FloatLiteral(typeContext, _0.value(), FloatType::P_32));
                            _r.range(_0.range());
                        }:
       |        FloatLiteral_64
                        :{
                            _r = create<return_t, false>(FloatLiteral(typeContext, _0.value(), FloatType::P_64));
                            _r.range(_0.range());
                        }:
       |        StringLiteral
                        :{
                            _r = create<return_t, false>(StringLiteral(typeContext, _0.value()));
                            _r.range(_0.range());
                        }:
       |        true         
                        :{
                            _r = create<return_t, false>(BooleanLiteral(typeContext, true));
                            _r.range(_0.range());
                        }:
       |        false         
                        :{
                            _r = create<return_t, false>(BooleanLiteral(typeContext, false));
                            _r.range(_0.range());
                        }:
       ;

RangeExpr:
                Expr ":" Expr RangeExprAux         
                        :{
                            if (_3)
                              _r = make<return_t>(RangeExpr(*_0, *_2, *_3));
                            else
                              _r = make<return_t>(RangeExpr(*_0, nullptr, *_2));
                            _r.range(_0.range());
                        }:
       ;

RangeExprAux @<Expr>@:
                ":" Expr         
                        :{
                            _r = std::move(_1);
                            _r.range(_0.begin(), _1.end());
                        }:
       |        E
       ;
 
