ModuleDecl:
                TopLevelDeclList         
                        :{
                            _r = make<return_t>(NamedDecl(Decl(), module_name), std::move(*_0));
                            ctx.add_module(*_r);
                            _r.range(_0.range());
                        }:
       ;

TopLevelDeclList @<DeclContext>@ static ZeroOrMore:
                TopLevelDecl         
                        :{
                            init(_r, _0.begin());
                            (*_r).add(*_0);
                            _r.end() = _0.end();
                        }:
       ;

TopLevelDecl @<Decl>@:
                FunctionDecl         
                        :{
                            _r = std::move(_0);
                        }:
       |        VariableDecl ";"         
                        :{
                            _r = std::move(_0);
                        }:
       |        StructDecl         
                        :{
                            _r = std::move(_0);
                        }:
       |        EnumDecl         
                        :{
                            _r = std::move(_0);
                        }:
       |        ImportDecl         
                        :{
                            _r = std::move(_0);
                        }:
       |        ExternFunctionDecl         
                        :{
                            _r = std::move(_0);
                        }:
       |        UsingDecl         
                        :{
                            _r = std::move(_0);
                        }:
       ;

ImportDecl:
                import StringLiteral     
                        :{
                            _r = make<return_t>(ImportDecl(Decl(), _1.value(), reference<ModuleDecl>{}));
                            _r.range(_0.begin(), _1.end());
                        }:
       ;

UsingDecl:
                using Identifier "=" QualType ";"     
                        :{
                            _r = make<return_t>(_1.value(), std::move(*_3));
                            _r.range(_0.begin(), _1.end());
                        }:
       ;

ExternFunctionDecl:
                extern fn Identifier "(" QualTypeList ")" ReturnType ";"         
                        :{
                            _r = make<return_t>(ExternFunctionDecl(NamedDecl(Decl(), _2.value()), std::move(*_6), std::move(*_4)));
                            _r.range(_0.begin(), _5.end());
                        }:
       ;

QualTypeList @<std::vector<QualType>>@ static:
                QualType QualTypeListH         
                        :{
                            init(_r);
                            (*_r).push_back(*_0);
                            if (_1) {
                              for (auto &node : (*_1))
                                (*_r).push_back(node);
                            }
                        }:
       |        E         
                        :{
                            init(_r);
                        }:
       ;

QualTypeListH @<std::vector<QualType>>@ static ZeroOrMore:
                CommaQualType         
                        :{
                            init(_r);
                            (*_r).push_back(*_0);
                        }:
       ;

CommaQualType @<QualType>@ static:
                "," QualType         
                        :{
                            _r = std::move(_1);
                        }:
       ;


FunctionDecl:
                fn Identifier "(" ParameterList ")" ReturnType CompoundStmt         
                        :{
                            _r = make<return_t>(FunctorDecl(NamedDecl(Decl(), _1.value()), DeclContext(), std::move(*_5), std::move(*_3), *_6));
                            _r.range(_0.begin(), _6.end());
                        }:
       ;

ParameterList @<std::vector<ParameterDecl*>>@ static:
                ParameterDecl ParameterListH         
                        :{
                            init(_r);
                            (*_r).push_back(*_0);
                            if (_1) {
                              for (auto &node : (*_1))
                                (*_r).push_back(node);
                            }
                        }:
       |        E         
                        :{
                            init(_r);
                        }:
       ;

ParameterListH @<std::vector<ParameterDecl*>>@ static ZeroOrMore:
                CommaParameter         
                        :{
                            init(_r);
                            (*_r).push_back(*_0);
                        }:
       ;

CommaParameter @<ParameterDecl>@:
                "," ParameterDecl         
                        :{
                            _r = std::move(_1);
                        }:
       ;

ParameterDecl:
                VariableDecl         
                        :{
                            _r = create<return_t>(**_0);
                            _r.range(_0.range());
                        }:
       ;

VariableDecl:
                Identifier VariableType VariableInit         
                        :{
                            _r = make<return_t>(NamedDecl(Decl(), _0.value()), std::move(*_1), *_2);
                            _r.range(_0.begin(), _2 ? _2.end() : _1.end());
                        }:
       ;

VariableType @<QualType>@ static:
                ":" QualType
                        :{
                            _r = std::move(_1);
                        }:
       |        E
                        :{
                            _r = make<return_t>(QualType());
                        }:
       ;

VariableInit @<Expr>@:
                "=" Expr         
                        :{
                            _r = std::move(_1);
                        }:
       |        E
       ;

StructDecl:
                struct Identifier "{" StructElementList "}" ";"         
                        :{
                            _r = make<return_t>(_1.value(), _3 ? std::move(*_3) : DeclContext());
                            _r.range(_0.begin(), _5.end());
                        }:
       ;

StructElementList @<DeclContext>@ static ZeroOrMore:
                StructElement         
                        :{
                            init(_r);
                            (*_r).add(*_0);
                        }:
       ;

StructElement @<Decl>@:
                MemberDecl         
                        :{
                            _r = std::move(_0);
                        }:
       |        MethodDecl         
                        :{
                            _r = std::move(_0);
                        }:
       ;

MemberDecl:
                VariableDecl ";"         
                        :{
                            _r = create<return_t>(**_0);
                            _r.range(_0.range());
                        }:
       ;

MethodDecl:
                fn Identifier "(" ParameterList ")" ReturnType CompoundStmt         
                        :{
                            _r = make<return_t>(FunctorDecl(NamedDecl(Decl(), _1.value()), DeclContext(), std::move(*_5), std::move(*_3), *_6));
                            _r.range(_0.begin(), _6.end());
                        }:
       ;

ReturnType @<QualType>@ static:
                "->" QualType
                        :{
                            _r = std::move(_1);
                        }:
       |        E
                        :{
                            _r = make<return_t>(QualType());
                        }:
       ;

EnumDecl:
                enum Identifier "{" EnumElementList "}" ";"         
                        :{
                            _r = make<return_t>(_1.value(), QualType(QualType::None, get_type(IntType())), std::move(*_3));
                            _r.range(_0.begin(), _5.end());
                        }:
       ;

EnumElementList @<std::vector<EnumMemberDecl*>>@ static:
                EnumElement EnumElementListH         
                        :{
                            init(_r);
                            (*_r).push_back(*_0);
                            if (_1) {
                              for (auto &node : (*_1))
                                (*_r).push_back(node);
                            }
                        }:
       |        E         
                        :{
                            init(_r);
                        }:
       ;

EnumElementListH @<std::vector<EnumMemberDecl*>>@ static ZeroOrMore:
                "," EnumElement         
                        :{
                            init(_r);
                            (*_r).push_back(*_1);
                        }:
       ;

EnumElement @<EnumMemberDecl>@:
                Identifier EnumInit   
                        :{
                            _r = make<return_t>(EnumMemberDecl(_0.value(), _1 ? *_1 : nullptr));
                            _r.range(_0.begin(), _1 ? _1.end() : _0.end());
                        }:
       ;

EnumInit @<Expr>@:
                "=" Expr         
                        :{
                            _r = std::move(_1);
                        }:
       |        E
       ;