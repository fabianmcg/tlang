QualType static:
                QualTypePre Type QualTypePost         
                        :{
                            _r = make<return_t>((QualType::cvr_qualifiers)(*_0 | *_2), *_1);
                            _r.range(_0.begin(), _2 ? _2.end() : _1.end());
                        }:
       ;

QualTypePre @<QualType::cvr_qualifiers>@ static:
                const         
                        :{
                            _r = make<return_t>(QualType::Const);
                            _r.template range<false>(_0.range());
                        }:
       |        E         
                        :{
                            _r = make<return_t>(QualType::None);
                        }:
       ;

QualTypePost @<QualType::cvr_qualifiers>@ static:
                "&"         
                        :{
                            _r = make<return_t>(QualType::Reference);
                            _r.template range<false>(_0.range());
                        }:
       |        E         
                        :{
                            _r = make<return_t>(QualType::None);
                        }:
       ;

Type:
                BaseType PtrType ArrayType VariadicType         
                        :{
                            if (_1) {
                              PtrType* ptr = *_1;
                              while (ptr->getUnderlying())
                                ptr = (PtrType*) ptr->getUnderlying();
                              ptr->getUnderlying() = *_0;
                              _r = std::move(_1);
                              _r.range(_0.begin(), _1.end());
                            } else
                              _r = std::move(_0);
                            if (_2) {
                              ArrayType* ptr = *_2;
                              ptr->getUnderlying() = *_r;
                              _r = std::move(_2);
                              _r.range(_0.begin(), _2.end());
                            }
                            if (_3) {
                              _r = make_type(VariadicType(Type(), *_r));
                            }
                        }:
       |        "..."         
                        :{
                            _r = make_type(VariadicType(Type(), nullptr));
                        }:
       ;

VariadicType @<bool>@ static:
                "..."         
                        :{
                            _r = make<return_t>(true);
                            _r.template range<false>(_0.range());
                        }:
       |        E
       ;

PtrType @<PtrType>@ ZeroOrMore:
                "*"         
                        :{
                            if (!*_r)
                              _r = make_type(PtrType(Type(), nullptr));
                            else
                              _r = make_type(PtrType(Type(), *_r));
                            _r.template range<false>(_0.range());
                        }:
       ;

ArrayType @<ArrayType>@:
                "[" ExprList "]"         
                        :{
                            _r = make_type(ArrayType(nullptr, std::move(*_1)));
                            _r.template range<false>(_0.begin(), _2.end());
                        }:
       |        E
       ;

BaseType @<Type>@:
                BuiltinType         
                        :{
                            _r = std::move(_0);
                        }:
       |        Identifier         
                        :{
                            _r = make_type(UnresolvedType(_0.value()));
                            _r.range(_0.range());
                        }:
       ;

BuiltinType:
                IntType         
                        :{
                            _r = std::move(_0);
                        }:
       |        FloatType         
                        :{
                            _r = std::move(_0);
                        }:
       |        bool         
                        :{
                            _r = make_type(BoolType());
                            _r.range(_0.range());
                        }:
       |        address         
                        :{
                            _r = make_type(AddressType());
                            _r.range(_0.range());
                        }:
       ;

IntType:
                int        
                        :{
                            _r = make_type(IntType(BuiltinType(), IntType::Default, IntType::Signed));
                            _r.range(_0.range());
                        }:
       |        i8        
                        :{
                            _r = make_type(IntType(BuiltinType(), IntType::P_8, IntType::Signed));
                            _r.range(_0.range());
                        }:
       |        i16        
                        :{
                            _r = make_type(IntType(BuiltinType(), IntType::P_16, IntType::Signed));
                            _r.range(_0.range());
                        }:
       |        i32        
                        :{
                            _r = make_type(IntType(BuiltinType(), IntType::P_32, IntType::Signed));
                            _r.range(_0.range());
                        }:
       |        i64        
                        :{
                            _r = make_type(IntType(BuiltinType(), IntType::P_64, IntType::Signed));
                            _r.range(_0.range());
                        }:
       |        uint        
                        :{
                            _r = make_type(IntType(BuiltinType(), IntType::Default, IntType::Unsigned));
                            _r.range(_0.range());
                        }:
       |        u8        
                        :{
                            _r = make_type(IntType(BuiltinType(), IntType::P_8, IntType::Unsigned));
                            _r.range(_0.range());
                        }:
       |        u16        
                        :{
                            _r = make_type(IntType(BuiltinType(), IntType::P_16, IntType::Unsigned));
                            _r.range(_0.range());
                        }:
       |        u32        
                        :{
                            _r = make_type(IntType(BuiltinType(), IntType::P_32, IntType::Unsigned));
                            _r.range(_0.range());
                        }:
       |        u64        
                        :{
                            _r = make_type(IntType(BuiltinType(), IntType::P_64, IntType::Unsigned));
                            _r.range(_0.range());
                        }:
       ;

FloatType:
                float        
                        :{
                            _r = make_type(FloatType(BuiltinType(), FloatType::Default));
                            _r.range(_0.range());
                        }:
       |        f8        
                        :{
                            _r = make_type(FloatType(BuiltinType(), FloatType::P_8));
                            _r.range(_0.range());
                        }:
       |        f16        
                        :{
                            _r = make_type(FloatType(BuiltinType(), FloatType::P_16));
                            _r.range(_0.range());
                        }:
       |        f32        
                        :{
                            _r = make_type(FloatType(BuiltinType(), FloatType::P_32));
                            _r.range(_0.range());
                        }:
       |        f64        
                        :{
                            _r = make_type(FloatType(BuiltinType(), FloatType::P_64));
                            _r.range(_0.range());
                        }:
       ;
 
