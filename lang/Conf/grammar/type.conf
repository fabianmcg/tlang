QualType static:
                Type QualTypeH         
                        :{
                            _r = make<return_t>((QualType::cvr_qualifiers)(QualType::None | *_1), *_0);
                            _r.range(_0.begin(), _1 ? _1.end() : _0.end());
                        }:
       |        const Type QualTypeH         
                        :{
                            _r = make<return_t>((QualType::cvr_qualifiers)(QualType::Const | *_2), *_1);
                            _r.range(_0.begin(), _2 ? _2.end() : _1.end());
                        }:
       ;

QualTypeH @<QualType::cvr_qualifiers>@ static:
                "&"         
                        :{
                            _r = make<return_t>(QualType::Reference);
                            _r.template range<false>(_0.range());
                        }:
       |        E         
                        :{
                            _r = make<return_t>(QualType::None);
                        }:
       ;

Type:
                BaseType PtrType VariadicType         
                        :{
                            if (_1) {
                              _r = make_type(PtrType(Type(), *_0));
                              _r.range(_0.begin(), _1.end());
                            } else
                              _r = std::move(_0);
                            if (_2) {
                              _r = make_type(VariadicType(Type(), *_r));
                            }
                        }:
       ;

PtrType @<bool>@ static:
                "*"         
                        :{
                            _r = make<return_t>(true);
                            _r.template range<false>(_0.range());
                        }:
       |        E
       ;

VariadicType @<bool>@ static:
                "..."         
                        :{
                            _r = make<return_t>(true);
                            _r.template range<false>(_0.range());
                        }:
       |        E
       ;

BaseType @<Type>@:
                BuiltinType         
                        :{
                            _r = std::move(_0);
                        }:
       |        Identifier         
                        :{
                            _r = make_type(UnresolvedType(_0.value()));
                            _r.range(_0.range());
                        }:
       ;

BuiltinType:
                IntType         
                        :{
                            _r = std::move(_0);
                        }:
       |        FloatType         
                        :{
                            _r = std::move(_0);
                        }:
       |        bool         
                        :{
                            _r = make_type(BoolType());
                            _r.range(_0.range());
                        }:
       |        string         
                        :{
                            _r = make_type(StringType());
                            _r.range(_0.range());
                        }:
       ;

IntType:
                int IntTypeH         
                        :{
                            _r = make_type(IntType(BuiltinType(), IntType::Default, IntType::Signed));
                            _r.range(_0.range());
                        }:
       |        uint IntTypeH         
                        :{
                            _r = make_type(IntType(BuiltinType(), IntType::Default, IntType::Unsigned));
                            _r.range(_0.range());
                        }:
       ;

IntTypeH @<int>@:
                "<" IntLiteral ">"
       |        E
       ;

FloatType:
                float FloatTypeH         
                        :{
                            _r = make_type(FloatType(BuiltinType(), FloatType::Default));
                            _r.range(_0.range());
                        }:
       ;

FloatTypeH @<int>@:
                "<" IntLiteral ">"
       |        E
       ;
 
