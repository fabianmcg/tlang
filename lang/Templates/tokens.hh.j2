#ifndef LEX_TOKENS_HH
#define LEX_TOKENS_HH

#include <cstdint>
#include <iostream>
#include <string>

namespace tlang {
namespace lex {
enum class token_kind {
  UNKW = -1,
  EOS = 0,
  FIRST = 1024,
{% for key, value in enum.items() -%}
{{ "  {: <30}//  {}".format(key + ',', value) }}
{% endfor %}};
using tok_k = token_kind;
inline std::string to_string(tok_k kind) {
  switch (kind) {
  case tok_k::UNKW:
    return "unknown";
  case tok_k::EOS:
    return "eof";
{% for key, value in switch.items() -%}
{{ "  case tok_k::{}:".format(key) }}
    return "{{ value }}";
{% endfor %}  default:
    return "";
  }
}
inline std::ostream &operator<<(std::ostream &ost, token_kind kind) {
  ost << to_string(kind);
  return ost;
}
}
}
#endif
