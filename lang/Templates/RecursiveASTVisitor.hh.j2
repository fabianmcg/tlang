#ifndef __RECURSIVE_AST_VISITOR_HH__
#define __RECURSIVE_AST_VISITOR_HH__
#include <deque>
#include "ASTNode.hh"
#include "VisitorHelper.hh"
namespace _astnp_ {
enum class VisitorPattern {
  preOrder = 1,
  postOrder = 2,
  prePostOrder = 3,
};
template <typename Derived, VisitorPattern pattern = VisitorPattern::preOrder>
class RecursiveASTVistor {
public:
  using stack_t = std::deque<ASTNode*>;
#define WALKUP_MACRO(PARENT, CLASS)                         \
  auto& derived = getDerived();                             \
  if (!(derived.walkUpTo##PARENT(node->getAsPtr<PARENT>())  \
      && derived.visit##CLASS(node)))                       \
    return false;                                           \
  return true;
#define MAKE_STACK std::unique_ptr<stack_t> _stack;         \
  if (!stack) {                                             \
    _stack = std::make_unique<stack_t>();                   \
    stack = _stack.get();                                   \
  }                                                       
#define TRAVERSE_MACRO(CLASS)                               \
  auto& derived = getDerived();                             \
  if constexpr (VisitorPattern::preOrder == pattern)        \
    if (!derived.walkUpTo##CLASS(node))                     \
      return false;                                         \
  MAKE_STACK                                                \
  addChildren<CLASS>(node, stack);                          \
  if (!traverseStack(stack))                                \
    return false;                                           \
  if constexpr (VisitorPattern::postOrder == pattern)       \
    if (!derived.walkUpTo##CLASS(node))                     \
      return false;                                         \
  return true;
  Derived& getDerived() {
    return *static_cast<Derived*>(this);
  }
  bool visitASTNode(ASTNode *node) {
    return true;
  }
  bool visitASTNodeList(ASTNodeList *node) {
    return true;
  }
  {{ VISIT }}bool walkUpToASTNode(ASTNode *node) {
    return getDerived().visitASTNode(node);
  }
  bool walkUpToASTNodeList(ASTNodeList *node) {
    WALKUP_MACRO(ASTNode, ASTNodeList)
  }
  {{ WALK_UP }}bool traverseASTNode(ASTNode *node, stack_t *stack = nullptr) {
    return getDerived().walkUpToASTNode(node);
  }
  bool traverseASTNodeList(ASTNodeList *node, stack_t *stack = nullptr) {
    TRAVERSE_MACRO(ASTNodeList)
  }
  {{ TRAVERSE }}protected:
  bool traverseStack(stack_t *stack) {
    while (!stack->empty()) {
      auto top = stack->front();
      stack->pop_front();
      if (!top)
        continue;
      if (!selectTraverse(top, stack))
        return false;
    }
    return true;
  }
  bool selectTraverse(ASTNode *node, stack_t *stack) {
    auto kind = node->classOf();
    auto &derived = getDerived();
    switch (kind) {
    case NodeClass::ASTNode:
      return derived.traverseASTNode(node, stack);
    case NodeClass::ASTNodeList:
      return derived.traverseASTNodeList(node->getAsPtr<ASTNodeList>(), stack);
    {{ TRAVERSE_CASES }}default:
      break;
    }
    return true;
  }
#undef WALKUP_MACRO
#undef TRAVERSE_MACRO
#undef MAKE_STACK
};

template <typename Derived>
class RecursiveASTVistor<Derived, VisitorPattern::prePostOrder> {
public:
  using stack_t = std::deque<ASTNode*>;
#define WALKUP_MACRO(PARENT, CLASS)                         \
  auto& derived = getDerived();                             \
  if (!(derived.walkUpTo##PARENT(                           \
         node->getAsPtr<PARENT>(), isFirst)                 \
      && derived.visit##CLASS(node, isFirst)))              \
    return false;                                           \
  return true;
#define MAKE_STACK std::unique_ptr<stack_t> _stack;         \
  if (!stack) {                                             \
    _stack = std::make_unique<stack_t>();                   \
    stack = _stack.get();                                   \
  }                                                       
#define TRAVERSE_MACRO(CLASS)                               \
  auto& derived = getDerived();                             \
  if (!derived.walkUpTo##CLASS(node, true))                 \
    return false;                                           \
  MAKE_STACK                                                \
  addChildren<CLASS>(node, stack);                          \
  if (!traverseStack(stack))                                \
    return false;                                           \
  if (!derived.walkUpTo##CLASS(node, false))                \
    return false;                                           \
  return true;
  Derived& getDerived() {
    return *static_cast<Derived*>(this);
  }
  bool visitASTNode(ASTNode *node, bool isFirst) {
    return true;
  }
  bool visitASTNodeList(ASTNodeList *node, bool isFirst) {
    return true;
  }
  {{ VISIT_PP }}bool walkUpToASTNode(ASTNode *node, bool isFirst) {
    return getDerived().visitASTNode(node, isFirst);
  }
  bool walkUpToASTNodeList(ASTNodeList *node, bool isFirst) {
    WALKUP_MACRO(ASTNode, ASTNodeList)
  }
  {{ WALK_UP_PP }}bool traverseASTNode(ASTNode *node, stack_t *stack = nullptr) {
    return getDerived().walkUpToASTNode(node, true) && getDerived().walkUpToASTNode(node, false);
  }
  bool traverseASTNodeList(ASTNodeList *node, stack_t *stack = nullptr) {
    TRAVERSE_MACRO(ASTNodeList)
  }
  {{ TRAVERSE }}protected:
  bool traverseStack(stack_t *stack) {
    while (!stack->empty()) {
      auto top = stack->front();
      stack->pop_front();
      if (!top)
        continue;
      if (!selectTraverse(top, stack))
        return false;
    }
    return true;
  }
  bool selectTraverse(ASTNode *node, stack_t *stack) {
    auto kind = node->classOf();
    auto &derived = getDerived();
    switch (kind) {
    case NodeClass::ASTNode:
      return derived.traverseASTNode(node, stack);
    case NodeClass::ASTNodeList:
      return derived.traverseASTNodeList(node->getAsPtr<ASTNodeList>(), stack);
    {{ TRAVERSE_CASES }}default:
      break;
    }
    return true;
  }
#undef WALKUP_MACRO
#undef TRAVERSE_MACRO
#undef MAKE_STACK
};
}
#endif
