#include "Parser/Parser.hh"

namespace _pnp_ {
class ParserHelper {
public:
  ParserHelper(Parser &parser) : parser(parser), tok(parser.tok) {} {{ PARSE_METHODS }}
private:
  using context_t = typename Parser::context_t;
  Parser &parser;
  token &tok;
  token peekToken() { return parser.peekToken(); }
  void consumeToken() { return parser.consumeToken(); }
  context_t getContext() { return parser.getContext(); }
  template <typename T> void restoreContext(T &&context) {
    parser.restoreContext(std::forward<T>(context));
  }
};
void Parser::ParseASTContext(ASTContext& ctx) {
  auto helper = ParserHelper(*this);
  ctx  = std::move(*helper.ParseTop());
}
} // namespace _pnp_
