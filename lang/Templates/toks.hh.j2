#ifndef __LEXER_TOKENS_HH__
#define __LEXER_TOKENS_HH__

#include <macros.hh>
#include <cstdint>
#include <iostream>
#include <string>

namespace __lang_np__ {
namespace __lex_np__ {
enum class token_kind {
  UNKW = -1,
  NONE = 0,
  FIRST = 1024,
{% for key, value in enum.items() -%}
{{ "  {: <30}//  {}".format(key + ',', value) }}
{% endfor %}};
using tk = token_kind;
inline std::string to_string(tk kind) {
  switch (kind) {
  case tk::UNKW:
    return "unknown";
  case tk::NONE:
    return "none";
{% for key, value in switch.items() -%}
{{ "  case tk::{}:".format(key) }}
    return "{{ value }}";
{% endfor %}  default:
    return "";
  }
}
inline std::ostream &operator<<(std::ostream &ost, token_kind kind) {
  ost << to_string(kind);
  return ost;
}
} // namespace __lex_np__
} // namespace __lang_np__
#endif
