#******************************************************************************
#
#   Rules
#
#******************************************************************************
defs:
  D: '[0-9]'
  NZ: '[1-9]'
  L: '[a-zA-Z_]'
  A: '[a-zA-Z_0-9]'
  E: '([Ee][+-]?{D}+)'
  WS: '[ \t\v\f]'
rules:
#******************************************************************************
#
#   Keywords
#
#******************************************************************************
#******************************************************************************
#   Parallel constructs
#******************************************************************************
  Task:
    rule: task
  Policy:
    rule: policy
  Arch:
    rule: arch
  Parallel:
    rule: parallel
  Sync:
    rule: sync
  Async:
    rule: async
  Wait:
    rule: wait
  Atomic:
    rule: atomic
#******************************************************************************
#   Language constructs
#******************************************************************************
  Function:
    rule: function
  Struct:
    rule: struct
  Enum:
    rule: enum
  Loop:
    rule: loop
  For:
    rule: for
  While:
    rule: while
  Continue:
    rule: continue
  If:
    rule: if
  Else:
    rule: else
  Switch:
    rule: switch
  Case:
    rule: case
  Break:
    rule: break
  Default:
    rule: default
  Import:
    rule: import
  Const:
    rule: const
  Inline:
    rule: inline
  Using:
    rule: using
  Return:
    rule: return
  Ccall:
    rule: ccall
  Constexpr:
    rule: constexpr
  Alingment:
    rule: alignment
  Auto:
    rule: auto
#******************************************************************************
#   Memory Kinds
#******************************************************************************
  Global:
    rule: global
  Shared:
    rule: shared
  Local:
    rule: local
  Constant:
    rule: constant
#******************************************************************************
#   Fundamental types
#******************************************************************************
  Void:
    rule: void
  Bool:
    rule: bool
  Int:
    rule: int
  Float:
    rule: float
  Complex:
    rule: complex
  Array:
    rule: array
  Vector:
    rule: vector
  Matrix:
    rule: matrix
  Tensor:
    rule: tensor
  String:
    rule: string
#******************************************************************************
#
#   Literals & Identifiers
#
#******************************************************************************
  'True':
    rule: 'true'
  'False':
    rule: 'false'
  Int_lit:
    rule:
    - '{NZ}{D}*'
  Float_lit:
    rule:
    - '{D}+{E}'
    - '{D}*"."{D}+{E}?'
  Identifier:
    rule: 
    - '{L}{A}*'
#******************************************************************************
#
#   Operands
#
#******************************************************************************
  And:
    rule: '&&'
  Or:
    rule: '||'
  Equal:
    rule: '=='
  NEQ:
    rule: '!='
  LEQ:
    rule: '<='
  GEQ:
    rule: '>='
  LShift:
    rule: '<<'
  RShift:
    rule: '>>'
  Pow:
    rule: '^^'
  Namespace:
    rule: '::'
#******************************************************************************
#   Characters
#******************************************************************************
  Not:
    rule: '!'
    value: '!'
  Band:
    rule: '&'
    value: '&'
  Bor:
    rule: '|'
    value: '|'
  Less:
    rule: '<'
    value: '<'
  Greater:
    rule: '>'
    value: '>'
  Assign:
    rule: '='
    value: '='
  Plus:
    rule: '+'
    value: '+'
  Minus:
    rule: '-'
    value: '-'
  Multiply:
    rule: '*'
    value: '*'
  Divide:
    rule: '/'
    value: '/'
  At:
    rule: '@'
    value: '@'
  Dot:
    rule: '.'
    value: '.'
  Comma:
    rule: ','
    value: ','
  Colon:
    rule: ':'
    value: ':'
  Semi:
    rule: ';'
    value: ';'
  Ternary:
    rule: '?'
    value: '?'
#******************************************************************************
#   Braces
#******************************************************************************
  LBrace:
    rule: '{'
    value: '{'
  RBrace:
    rule: '}'
    value: '}'
  LParen:
    rule: '('
    value: '('
  RParen:
    rule: ')'
    value: ')'
  LBrack:
    rule: '['
    value: '['
  RBrack:
    rule: ']'
    value: ']'
